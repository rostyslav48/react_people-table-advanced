{"version":3,"sources":["Pages/HomePage.tsx","components/Loader/Loader.tsx","api.ts","types/ErrorMessage.ts","types/Gender.ts","components/PeopleTable/PersonLink.tsx","utils/searchHelper.ts","components/PeopleTable/PeopleTable.tsx","utils/constants.ts","components/PeopleFilters/PeopleFilters.tsx","services/getFilteredPeople.ts","Pages/People.tsx","services/addParentsToPeople.tsx","components/Navigation/Navigation.tsx","App.tsx","Pages/DefaultPage.tsx","Root.tsx","index.tsx"],"names":["HomePage","className","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","ErrorMessage","Gender","PersonLink","person","useSearchParams","searchParams","name","slug","sex","classNames","Female","to","pathname","search","toString","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","PeopleTable","people","personSlug","useParams","sort","get","order","getSortSearchLink","sortField","searchUpdates","map","header","normalisedHeader","toLowerCase","born","died","motherName","mother","fatherName","father","PeopleFilters","setSearchParams","SEX_FILTER_DATA","All","Male","query","centuries","getAll","handleCenturyChange","century","filteredCenturies","includes","filter","item","keys","definedKey","type","placeholder","onChange","event","update","target","length","filterByCentury","numberCentury","Number","year","Math","ceil","getFilteredPeople","filteredPeople","sortBy","sortedPeople","personA","personB","localeCompare","getSortFunction","reverse","sortByParam","filterBySex","normalisedQuery","trim","filterByQuery","People","useState","setPeople","Default","errorMessage","setErrorMessage","isLoading","setIsLoading","queryParams","isErrorMessageDisplayed","isNoPeopleOnServer","isNoMatchingPeople","isTableDisplayed","Boolean","useEffect","peopleFromServer","find","addParentsToPeople","catch","WentWrong","finally","getLinkClass","isActive","Navigation","role","App","DefaultPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.18cb577a.chunk.js","sourcesContent":["export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export enum ErrorMessage {\n  Default = '',\n  WentWrong = 'Something went wrong',\n}\n","export enum Gender {\n  Male = 'm',\n  Female = 'f',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { Gender } from '../../types/Gender';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n  const { name, slug, sex } = person;\n\n  return (\n    <Link\n      className={classNames({\n        'has-text-danger': sex === Gender.Female,\n      })}\n      to={{\n        pathname: `../${slug}`,\n        search: searchParams.toString(),\n      }}\n    >\n      {name}\n    </Link>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import React from 'react';\n\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from './PersonLink';\nimport { EMPTY_FIELD } from '../../utils/constants';\nimport { getSearchWith } from '../../utils/searchHelper';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { personSlug } = useParams();\n\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const TABLE_HEADERS_WITH_SORT = [\n    'Name',\n    'Sex',\n    'Born',\n    'Died',\n  ];\n\n  const TABLE_HEADERS_NO_SORT = [\n    'Mother',\n    'Father',\n  ];\n\n  const getSortSearchLink = (sortField: string) => {\n    const searchUpdates: { sort: string | null, order: null | string } = {\n      sort: sortField,\n      order: null,\n    };\n\n    if (sort === sortField && !order) {\n      searchUpdates.order = 'desc';\n    }\n\n    if (sort === sortField && order) {\n      searchUpdates.sort = null;\n    }\n\n    return getSearchWith(searchParams, searchUpdates);\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {TABLE_HEADERS_WITH_SORT.map(header => {\n            const normalisedHeader = header.toLowerCase();\n\n            return (\n              <th key={header}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {header}\n                  <Link to={{\n                    search: getSortSearchLink(normalisedHeader),\n                  }}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames('fas', {\n                        'fa-sort': normalisedHeader !== sort,\n                        'fa-sort-up': normalisedHeader === sort && !order,\n                        'fa-sort-down': normalisedHeader === sort && order,\n                      })}\n                      />\n                    </span>\n                  </Link>\n                </span>\n              </th>\n            );\n          })}\n\n          {TABLE_HEADERS_NO_SORT.map(header => (\n            <th key={header}>\n              {header}\n            </th>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const {\n            slug,\n            sex,\n            born,\n            died,\n            motherName,\n            mother,\n            fatherName,\n            father,\n          } = person;\n\n          return (\n            <tr\n              key={slug}\n              data-cy=\"person\"\n              className={classNames({\n                'has-background-warning': slug === personSlug,\n              })}\n            >\n              <td>\n                <PersonLink\n                  person={person}\n                />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n\n              <td>\n                {mother\n                  ? (\n                    <PersonLink\n                      person={mother}\n                    />\n                  )\n                  : (\n                    motherName || EMPTY_FIELD\n                  )}\n              </td>\n\n              <td>\n                {father\n                  ? (\n                    <PersonLink\n                      person={father}\n                    />\n                  )\n                  : (\n                    fatherName || EMPTY_FIELD\n                  )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","export const EMPTY_FIELD = '-';\n","import React from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\n\nimport classNames from 'classnames';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { Gender } from '../../types/Gender';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const CENTURIES_LINKS = ['16', '17', '18', '19', '20'];\n  const SEX_FILTER_DATA = {\n    All: null,\n    Male: 'm',\n    Female: 'f',\n  };\n\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') as Gender || null;\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const setSearchWith = (key: string, update: string | null) => {\n    setSearchParams(getSearchWith(searchParams, ({ [key]: update })));\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchWith('query', event.target.value);\n  };\n\n  const handleCenturyChange = (century: string) => {\n    const filteredCenturies = centuries.includes(century)\n      ? centuries.filter(item => item !== century)\n      : [...centuries, century];\n\n    return getSearchWith(searchParams, { centuries: filteredCenturies });\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.keys(SEX_FILTER_DATA).map(key => {\n          const definedKey = key as keyof typeof SEX_FILTER_DATA;\n\n          return (\n            <Link\n              key={key}\n              className={classNames({\n                'is-active': SEX_FILTER_DATA[definedKey] === sex,\n              })}\n              to={{\n                search: getSearchWith(searchParams, {\n                  sex: SEX_FILTER_DATA[definedKey],\n                }),\n              }}\n            >\n              {key}\n            </Link>\n          );\n        })}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleQueryChange}\n            value={query}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES_LINKS.map(century => (\n              <Link\n                key={century}\n                data-cy=\"century\"\n                className={classNames(\n                  'button',\n                  'mr-1',\n                  {\n                    'is-info': centuries.includes(century),\n                  },\n                )}\n                to={{\n                  search: handleCenturyChange(century),\n                }}\n              >\n                {century}\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <Link\n              data-cy=\"centuryALL\"\n              className={classNames('button', {\n                'is-success': !centuries.length,\n                'is-outlined': !!centuries.length,\n              })}\n              to={{\n                search: getSearchWith(searchParams, { centuries: null }),\n              }}\n            >\n              All\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <Link\n          className=\"button is-link is-outlined is-fullwidth\"\n          to={{\n            search: getSearchWith(searchParams, {\n              centuries: null,\n              query: null,\n              sex: null,\n            }),\n          }}\n        >\n          Reset all filters\n        </Link>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from '../types';\nimport { QueryParams } from '../types/FilterQuery';\nimport { Gender } from '../types/Gender';\n\nconst getCentury = (year: number) => {\n  return Math.ceil(year / 100);\n};\n\nconst filterBySex = (people: Person[], sex: Gender | null) => {\n  if (sex) {\n    return people.filter(person => person.sex === sex);\n  }\n\n  return people;\n};\n\nconst filterByQuery = (people: Person[], query: string) => {\n  const normalisedQuery = query.toLowerCase().trim();\n\n  if (normalisedQuery) {\n    return people\n      .filter(({ name }) => (\n        name.toLowerCase().includes(normalisedQuery)\n      ));\n  }\n\n  return people;\n};\n\nconst filterByCentury = (people: Person[], century: string[]) => {\n  const numberCentury = century.map(Number);\n\n  if (century.length) {\n    return people\n      .filter(({ born }) => numberCentury.includes(getCentury(born)));\n  }\n\n  return people;\n};\n\nconst getSortFunction = (sortBy: keyof Person) => {\n  return (personA: Person, personB: Person): number => {\n    if (typeof personA[sortBy] === 'string') {\n      return (personA[sortBy] as string)\n        .localeCompare(personB[sortBy] as string);\n    }\n\n    if (typeof personA[sortBy] === 'number') {\n      return +(personA[sortBy] ?? 0) - +(personB[sortBy] ?? 0);\n    }\n\n    return 0;\n  };\n};\n\nconst sortByParam = (\n  people: Person[],\n  sortBy: keyof Person,\n  order: string,\n) => {\n  const sortedPeople = [...people].sort(getSortFunction(sortBy));\n\n  if (order) {\n    return sortedPeople.reverse();\n  }\n\n  return sortedPeople;\n};\n\nexport const getFilteredPeople = (people: Person[], query: QueryParams) => {\n  let filteredPeople = sortByParam(people, query.sort, query.order);\n\n  filteredPeople = filterBySex(filteredPeople, query.sex);\n  filteredPeople = filterByQuery(filteredPeople, query.query);\n  filteredPeople = filterByCentury(filteredPeople, query.centuries);\n\n  return filteredPeople;\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { Loader } from '../components/Loader';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { ErrorMessage } from '../types/ErrorMessage';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { addParentsToPeople } from '../services';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { QueryParams } from '../types/FilterQuery';\nimport { Gender } from '../types/Gender';\nimport { getFilteredPeople } from '../services/getFilteredPeople';\n\nexport const People = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [errorMessage, setErrorMessage] = useState(ErrorMessage.Default);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams] = useSearchParams();\n\n  const queryParams: QueryParams = {\n    query: searchParams.get('query') || '',\n    sex: searchParams.get('sex') as Gender || null,\n    centuries: searchParams.getAll('centuries') || [],\n    sort: searchParams.get('sort') as keyof Person || '',\n    order: searchParams.get('order') || '',\n  };\n\n  const filteredPeople = getFilteredPeople(people, queryParams);\n\n  const isErrorMessageDisplayed = !isLoading && errorMessage;\n  const isNoPeopleOnServer = !isLoading && !errorMessage && !people.length;\n  const isNoMatchingPeople\n    = !isLoading\n    && !errorMessage\n    && !filteredPeople.length;\n\n  const isTableDisplayed\n    = !isLoading\n    && !errorMessage\n    && Boolean(filteredPeople.length);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then((peopleFromServer) => (\n        setPeople(addParentsToPeople(peopleFromServer))\n      ))\n      .catch(() => setErrorMessage(ErrorMessage.WentWrong))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isErrorMessageDisplayed && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {errorMessage}\n                </p>\n              )}\n\n              {isNoPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isNoMatchingPeople && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people matching the current search criteria\n                </p>\n              )}\n\n              {isTableDisplayed && (\n                <PeopleTable people={filteredPeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport const addParentsToPeople = (people: Person[]): Person[] => {\n  return people.map(person => {\n    const father = people.find(({ name }) => person.fatherName === name);\n    const mother = people.find(({ name }) => person.motherName === name);\n\n    return ({\n      ...person,\n      father,\n      mother,\n    });\n  });\n};\n","import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => (\n  classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  })\n);\n\nexport const Navigation = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLink className={getLinkClass} to=\"/\">\n          Home\n        </NavLink>\n\n        <NavLink\n          className={getLinkClass}\n          to=\"/people\"\n        >\n          People\n        </NavLink>\n      </div>\n    </div>\n  </nav>\n);\n","import { Outlet } from 'react-router-dom';\n\nimport './App.scss';\nimport { Navigation } from './components/Navigation';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navigation />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const DefaultPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  Navigate, Route, HashRouter as Router, Routes,\n} from 'react-router-dom';\nimport { HomePage } from './Pages/HomePage';\nimport { People } from './Pages/People';\nimport { App } from './App';\nimport { DefaultPage } from './Pages/DefaultPage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/people\">\n            <Route path=\":personSlug?\" element={<People />} />\n          </Route>\n          <Route path=\"*\" element={<DefaultPage />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}