{"version":3,"sources":["Pages/HomePage.tsx","components/Loader/Loader.tsx","api.ts","types/ErrorMessage.ts","components/PeopleTable/PersonLink.tsx","types/Gender.ts","utils/searchHelper.ts","components/PeopleTable/PeopleTable.tsx","utils/constants.ts","components/PeopleFilters/PeopleFilters.tsx","services/getFilteredPeople.ts","Pages/People.tsx","services/addParentsToPeople.tsx","components/Navigation/Navigation.tsx","App.tsx","Pages/DefaultPage.tsx","Root.tsx","index.tsx"],"names":["HomePage","className","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","ErrorMessage","MALE_SEX","Gender","Male","isMale","sex","PersonLink","person","useSearchParams","searchParams","name","slug","classNames","to","pathname","search","toString","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","PeopleTable","people","personSlug","useParams","sort","get","order","getSortSearchLink","sortField","searchUpdates","map","header","toLowerCase","born","died","mother","motherName","father","fatherName","PeopleFilters","setSearchParams","SEX_FILTER_DATA","All","Female","centuries","getAll","handleCenturyChange","century","filteredCenturies","includes","filter","item","keys","definedKey","type","placeholder","onChange","event","update","target","length","query","filterByCentury","numberCentury","Number","year","Math","ceil","getFilteredPeople","filteredPeople","sortBy","sortedPeople","personA","personB","localeCompare","getSortFunction","reverse","sortByParam","filterBySex","normalisedQuery","trim","filterByQuery","People","useState","setPeople","Default","errorMessage","setErrorMessage","isLoading","setIsLoading","queryParams","isErrorMessageDisplayed","isNoPeopleOnServer","isNoMatchingPeople","isTableDisplayed","Boolean","useEffect","peopleFromServer","find","addParentsToPeople","catch","WentWrong","finally","getLinkClass","isActive","Navigation","role","App","DefaultPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.6b0051bb.chunk.js","sourcesContent":["export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export enum ErrorMessage {\n  Default = '',\n  WentWrong = 'Something went wrong',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { Gender } from '../../types/Gender';\n\nconst MALE_SEX = Gender.Male;\nconst isMale = (sex: string) => {\n  return sex === MALE_SEX;\n};\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n  const { name, slug, sex } = person;\n\n  return (\n    <Link\n      className={classNames({\n        'has-text-danger': !isMale(sex),\n      })}\n      to={{\n        pathname: `../${slug}`,\n        search: searchParams.toString(),\n      }}\n    >\n      {name}\n    </Link>\n  );\n};\n","export enum Gender {\n  Male = 'm',\n  Female = 'f',\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import React from 'react';\n\nimport { Link, useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from './PersonLink';\nimport { EMPTY_FIELD } from '../../utils/constants';\nimport { getSearchWith } from '../../utils/searchHelper';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { personSlug } = useParams();\n\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const TABLE_HEADERS_WITH_FILTERS = [\n    'Name',\n    'Sex',\n    'Born',\n    'Died',\n  ];\n\n  const TABLE_HEADERS_NO_FILTERS = [\n    'Mother',\n    'Father',\n  ];\n\n  const getSortSearchLink = (sortField: string) => {\n    const searchUpdates: { sort: string | null, order: null | string } = {\n      sort: sortField,\n      order: null,\n    };\n\n    if (sort === sortField && !order) {\n      searchUpdates.order = 'desc';\n    }\n\n    if (sort === sortField && order) {\n      searchUpdates.sort = null;\n    }\n\n    return getSearchWith(searchParams, searchUpdates);\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {TABLE_HEADERS_WITH_FILTERS.map(header => (\n            <th key={header}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {header}\n                <Link to={{\n                  search: getSortSearchLink(header.toLowerCase()),\n                }}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('fas', {\n                      'fa-sort': header.toLowerCase() !== sort,\n                      'fa-sort-up': header.toLowerCase() === sort && !order,\n                      'fa-sort-down': header.toLowerCase() === sort && order,\n                    })}\n                    />\n                  </span>\n                </Link>\n              </span>\n            </th>\n          ))}\n\n          {TABLE_HEADERS_NO_FILTERS.map(header => (\n            <th key={header}>\n              {header}\n            </th>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            key={person.slug}\n            data-cy=\"person\"\n            className={classNames({\n              'has-background-warning': person.slug === personSlug,\n            })}\n          >\n            <td>\n              <PersonLink\n                person={person}\n              />\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n\n            <td>\n              {person.mother\n                ? (\n                  <PersonLink\n                    person={person.mother}\n                  />\n                )\n                : (\n                  person.motherName || EMPTY_FIELD\n                )}\n            </td>\n\n            <td>\n              {person.father\n                ? (\n                  <PersonLink\n                    person={person.father}\n                  />\n                )\n                : (\n                  person.fatherName || EMPTY_FIELD\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","export const EMPTY_FIELD = '-';\n","import React from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\n\nimport classNames from 'classnames';\nimport { getSearchWith } from '../../utils/searchHelper';\nimport { Gender } from '../../types/Gender';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const CENTURIES_LINKS = ['16', '17', '18', '19', '20'];\n  const SEX_FILTER_DATA = {\n    All: null,\n    Male: 'm',\n    Female: 'f',\n  };\n\n  const sex = searchParams.get('sex') as Gender || null;\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const setSearchWith = (key: string, update: string | null) => {\n    setSearchParams(getSearchWith(searchParams, ({ [key]: update })));\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchWith('query', event.target.value);\n  };\n\n  const handleCenturyChange = (century: string) => {\n    const filteredCenturies = centuries.includes(century)\n      ? centuries.filter(item => item !== century)\n      : [...centuries, century];\n\n    return getSearchWith(searchParams, { centuries: filteredCenturies });\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.keys(SEX_FILTER_DATA).map(key => {\n          const definedKey = key as keyof typeof SEX_FILTER_DATA;\n\n          return (\n            <Link\n              key={key}\n              className={classNames({\n                'is-active': SEX_FILTER_DATA[definedKey] === sex,\n              })}\n              to={{\n                search: getSearchWith(searchParams, {\n                  sex: SEX_FILTER_DATA[definedKey],\n                }),\n              }}\n            >\n              {key}\n            </Link>\n          );\n        })}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES_LINKS.map(century => (\n              <Link\n                key={century}\n                data-cy=\"century\"\n                className={classNames(\n                  'button',\n                  'mr-1',\n                  {\n                    'is-info': centuries.includes(century),\n                  },\n                )}\n                to={{\n                  search: handleCenturyChange(century),\n                }}\n              >\n                {century}\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <Link\n              data-cy=\"centuryALL\"\n              className={classNames('button', {\n                'is-success': !centuries.length,\n                'is-outlined': !!centuries.length,\n              })}\n              to={{\n                search: getSearchWith(searchParams, { centuries: null }),\n              }}\n            >\n              All\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <Link\n          className=\"button is-link is-outlined is-fullwidth\"\n          to={{\n            search: getSearchWith(searchParams, {\n              centuries: null,\n              query: null,\n              sex: null,\n            }),\n          }}\n        >\n          Reset all filters\n        </Link>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from '../types';\nimport { QueryParams } from '../types/FilterQuery';\nimport { Gender } from '../types/Gender';\n\nconst getCentury = (year: number) => {\n  return Math.ceil(year / 100);\n};\n\nconst filterBySex = (people: Person[], sex: Gender | null) => {\n  if (sex) {\n    return people.filter(person => person.sex === sex);\n  }\n\n  return people;\n};\n\nconst filterByQuery = (people: Person[], query: string) => {\n  const normalisedQuery = query.toLowerCase().trim();\n\n  if (normalisedQuery) {\n    return people\n      .filter(({ name }) => (\n        name.toLowerCase().includes(normalisedQuery)\n      ));\n  }\n\n  return people;\n};\n\nconst filterByCentury = (people: Person[], century: string[]) => {\n  const numberCentury = century.map(Number);\n\n  if (century.length) {\n    return people\n      .filter(({ born }) => numberCentury.includes(getCentury(born)));\n  }\n\n  return people;\n};\n\nconst getSortFunction = (sortBy: keyof Person) => {\n  return (personA: Person, personB: Person): number => {\n    if (typeof personA[sortBy] === 'string') {\n      return (personA[sortBy] as string)\n        .localeCompare(personB[sortBy] as string);\n    }\n\n    if (typeof personA[sortBy] === 'number') {\n      return +(personA[sortBy] ?? 0) - +(personB[sortBy] ?? 0);\n    }\n\n    return 0;\n  };\n};\n\nconst sortByParam = (\n  people: Person[],\n  sortBy: keyof Person,\n  order: string,\n) => {\n  const sortedPeople = [...people].sort(getSortFunction(sortBy));\n\n  if (order) {\n    return sortedPeople.reverse();\n  }\n\n  return sortedPeople;\n};\n\nexport const getFilteredPeople = (people: Person[], query: QueryParams) => {\n  let filteredPeople = sortByParam(people, query.sort, query.order);\n\n  filteredPeople = filterBySex(filteredPeople, query.sex);\n  filteredPeople = filterByQuery(filteredPeople, query.query);\n  filteredPeople = filterByCentury(filteredPeople, query.centuries);\n\n  return filteredPeople;\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { Loader } from '../components/Loader';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { ErrorMessage } from '../types/ErrorMessage';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { addParentsToPeople } from '../services';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { QueryParams } from '../types/FilterQuery';\nimport { Gender } from '../types/Gender';\nimport { getFilteredPeople } from '../services/getFilteredPeople';\n\nexport const People = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [errorMessage, setErrorMessage] = useState(ErrorMessage.Default);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams] = useSearchParams();\n\n  const queryParams: QueryParams = {\n    query: searchParams.get('query') || '',\n    sex: searchParams.get('sex') as Gender || null,\n    centuries: searchParams.getAll('centuries') || [],\n    sort: searchParams.get('sort') as keyof Person || '',\n    order: searchParams.get('order') || '',\n  };\n\n  const filteredPeople = getFilteredPeople(people, queryParams);\n\n  const isErrorMessageDisplayed = !isLoading && errorMessage;\n  const isNoPeopleOnServer = !isLoading && !errorMessage && !people.length;\n  const isNoMatchingPeople\n    = !isLoading\n    && !errorMessage\n    && !filteredPeople.length;\n\n  const isTableDisplayed\n    = !isLoading\n    && !errorMessage\n    && Boolean(filteredPeople.length);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then((peopleFromServer) => (\n        setPeople(addParentsToPeople(peopleFromServer))\n      ))\n      .catch(() => setErrorMessage(ErrorMessage.WentWrong))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isErrorMessageDisplayed && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {errorMessage}\n                </p>\n              )}\n\n              {isNoPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isNoMatchingPeople && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people matching the current search criteria\n                </p>\n              )}\n\n              {isTableDisplayed && (\n                <PeopleTable people={filteredPeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport const addParentsToPeople = (people: Person[]): Person[] => {\n  return people.map(person => {\n    const father = people.find(({ name }) => person.fatherName === name);\n    const mother = people.find(({ name }) => person.motherName === name);\n\n    return ({\n      ...person,\n      father,\n      mother,\n    });\n  });\n};\n","import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => (\n  classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  })\n);\n\nexport const Navigation = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLink className={getLinkClass} to=\"/\">\n          Home\n        </NavLink>\n\n        <NavLink\n          className={getLinkClass}\n          to=\"/people\"\n        >\n          People\n        </NavLink>\n      </div>\n    </div>\n  </nav>\n);\n","import { Outlet } from 'react-router-dom';\n\nimport './App.scss';\nimport { Navigation } from './components/Navigation';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navigation />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const DefaultPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  Navigate, Route, HashRouter as Router, Routes,\n} from 'react-router-dom';\nimport { HomePage } from './Pages/HomePage';\nimport { People } from './Pages/People';\nimport { App } from './App';\nimport { DefaultPage } from './Pages/DefaultPage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/people\">\n            <Route path=\":personSlug?\" element={<People />} />\n          </Route>\n          <Route path=\"*\" element={<DefaultPage />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}